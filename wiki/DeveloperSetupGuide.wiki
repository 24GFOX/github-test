#summary Instructions for how to set up a build environment for Omaha
#labels Featured

= Introduction =

These instructions are intended to assist the would-be Omaha developer with setting up an environment in which to successfully build the Omaha source code.


= Required Downloads =

The following packages are required to build Omaha:
  * Omaha source code
    * You can either:
      * Download a full source package from the [http://code.google.com/p/omaha/downloads/list Downloads area].
      * See [http://code.google.com/p/omaha/source/checkout source checkout] for setting up access to the subversion repository. This will also require [http://subversion.tigris.org/ SVN] itself.
    * However you get the source code, it must be checked out or extracted to a directory named `omaha` exactly.
  * Microsoft Visual C++
    * You will need to have at least the Standard Edition of Visual C++ or Visual Studio. (Note: The Express Editions are not sufficient because they do not include ATL/MFC, which Omaha requires.)
    * Omaha currently builds with Microsoft Visual C++ 2005. You are welcome to contribute changes to make it build with newer versions.
  * Microsoft Vista SDK
    * Download the SDK [http://www.microsoft.com/downloads/details.aspx?FamilyID=4377f86d-c913-4b5c-b87e-ef72e5b4e065%26displaylang=en here].
  * Microsoft .NET Framework 2.0
    * This is pre-installed on Windows Vista machines.
    * If you're running Windows XP, you may need to download it [http://msdn.microsoft.com/en-us/netframework/aa731542.aspx here].
  * WTL
    * Download WTL [http://sourceforge.net/projects/wtl here].
  * WiX
    * Download any of the v3 binaries packages [http://sourceforge.net/project/showfiles.php?group_id=105970%26package_id=168888 here].
  * Python 2.4 (Be sure to use *2.4*, other versions have been seen to break the build)
    * Download Python [http://www.python.org/download/releases/2.4.4/ here].
    * You'll also need the [http://sourceforge.net/project/downloading.php?group_id=78018&filename=pywin32-212.win32-py2.4.exe pywin32 extensions].
  * SCons
    * Download SCons [http://www.scons.org/download.php here].
  * Software Construction Toolkit
    * Get the Software Construction Toolkit [http://code.google.com/p/swtoolkit/ here].


= Details =

== Installation ==

  # Install each of the above software packages that comes with an installer, which is all of them except Omaha source code and the Software Construction Toolkit.
  # Make sure you add the installed python directory to your path environment variable.
  # Follow the Software Construction Toolkit [http://code.google.com/p/swtoolkit/wiki/Introduction installation instructions]. Make sure you don't miss the part about setting up the SCONS_DIR environment variable.
  # Extract or checkout the Omaha source code to a location of your choice, perhaps something like "C:\Omaha"


== Environment Variables ==

Create the following environment variables:
  * SCT_DIR - set to the directory of the Software Construction Toolkit (eg. `C:\swtoolkit`)
  * OMAHA_NET_DIR - This will depend on your OS:
    * On Windows Vista or if it was pre-installed on Windows XP, set it to the framework directory (something like `C:\Windows\Microsoft.NET\Framework\v2.0.50727`).
    * Otherwise, set it to the directory where the .NET framework is installed.  (eg. `C:\Program Files\Microsoft.NET\Framework\v2.0.50727`)
  * OMAHA_PYTHON_DIR - set to the directory where python was installed. This directory should contain python.exe. (eg. `C:\python_24`)
  * OMAHA_VISTASDK_DIR - set to the directory where the Vista SDK was installed (e.g. `C:\Program Files\Microsoft SDKs\Windows\v6.0`)
  * OMAHA_WIX_DIR - set to the directory in WiX where 'candle.exe' and 'light.exe' are installed. This may be something like (eg. `C:\Program Files\Windows Installer XML v3\bin`)
  * OMAHA_WTL_DIR - set to the include directory in the WTL installation (eg. `C:\Program Files\WTL\include`)


== Running Unit Tests ==

In order to pass all of the unit tests, there is one other piece of setup required. You must download Windows !SysInternals !PsExec (you can get it [http://technet.microsoft.com/en-us/sysinternals/bb897553.aspx here]) and save `psexec.exe` somewhere. Then you will need to set an environment variable named OMAHA_PSEXEC_DIR to the directory containing `psexec.exe`.

When running unit tests:
  * You must be connected to the Internet for some tests to pass.
  * We recommend running them with administrator privileges as some tests do not run otherwise.

Some tests do not run by default because they take a long time or are otherwise inconvenient to run all the time. To run these tests, define the `OMAHA_RUN_ALL_TESTS` environment variable. For example, `set OMAHA_RUN_ALL_TESTS=1`.


== Conclusion ==

Once the above setup is complete:
  # Open a fresh cmd.exe window (if you're running under Vista, make sure cmd.exe is running as Administrator)
  # Navigate to the 'Omaha' directory, or whatever you called it.
  # From the above directory, just type `hammer` to build Omaha! (Note: More advanced build options can be found in [HammerOptions].)